@using OSIET_Finance.Controller.OptionAvancees
@using OSIET_Finance.Models.Finance
@using System.Globalization
@inject ISnackbar Snackbar
@inject IOptionAvancees optionService
<style>
    .selected {
        background-color: dimgrey !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }

    .mud-table-row .selected {
        background-color: dimgrey !important;
    }

    .my-custom-class {
        backdrop-filter: blur(10px);
    }

    .large {
        width: 1px
    }
</style>
@if (isVisible)
{
    <MudContainer Style="width:100%; height: 100%" Class="py-8">
        <MudText>Chargement...</MudText>
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="" />
    </MudContainer>
}
else
{
    <MudPaper>
        <div style="background-color: rgb(214,129,0)">
            <h3 class="py-2 ml-2">
                <MudIcon Class="mr-2" style="float: left" Icon="@Icons.Material.Filled.AddCircle"></MudIcon>
                <span>Création de solde</span>
            </h3>
        </div>

        <MudDivider />
        <MudContainer>
            <MudForm @ref="form" @bind-IsValid="success">
                <MudGrid>
                    <MudItem xs="4" sm="4">
                        <MudDatePicker @ref="_picker" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Date de création" @bind-Date="@solde.Date" AutoClose="@autoClose">
                            <PickerActions>
                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                                <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                                <MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                            </PickerActions>
                        </MudDatePicker>
                    </MudItem>
                    <MudItem xs="4" sm="4">
                        <MudSelect T="Compte" Label="Compte" ValueChanged="OnValueChanged" AnchorOrigin="Origin.BottomCenter" Required RequiredError="Obligatoire" Variant="Variant.Outlined" Margin="Margin.Dense">
                            @foreach (var item in comptes)
                            {
                                <MudSelectItem Value="@item">@item.NomCompte</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4" sm="4">
                        <MudTextField Clearable Immediate="false" Format="N2" Culture="@_de" T="double?" Label="Montant à ajouter" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value=@solde.Montant Required="true" RequiredError="Obligatoire"></MudTextField>
                    </MudItem>
                </MudGrid>
            </MudForm>
            <div style="float: right; margin-top: 15px; margin-bottom:15px">
                <MudButton StartIcon="@Icons.Material.Filled.Cancel" Class="mr-3" Color="Color.Secondary" Variant="Variant.Outlined" Margin="Margin.Dense" OnClick="Annuler">Annuler</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Save" Color="Color.Success" Variant="Variant.Filled" OnClick="AddSolde">Enregistrer</MudButton>
            </div>

        </MudContainer>
        <MudDivider Class="mt-4" />
        <div style="background-color: rgb(214,129,0)">
            <h3 class="py-2 ml-2">
                <MudIcon Class="mr-2" style="float: left" Icon="@Icons.Material.Filled.ViewList"></MudIcon>
                <span>Solde courant</span>
            </h3>
        </div>

        <MudDivider />
        <MudContainer Class="py-4">
            <MudTable Items="@soldiums" Dense="true" Hover="true" T="Soldium" FixedHeader="true" FixedFooter="true" HorizontalScrollbar="true" Height="200px"
                  Filter="new Func<Soldium,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" Breakpoint="Breakpoint.Sm" Bordered=true
                  @ref="tableSolde" Striped>
                <ToolBarContent>
                    @*                <MudText Typo="Typo.h6">Liste des utilisateurs</MudText>*@
                    <MudSpacer />
                    <MudSpacer />
                    <MudSpacer />
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1" Placeholder="Recherche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    @*<MudTh>ID</MudTh>*@
                    <MudTh>Date</MudTh>
                    <MudTh>Nom compte</MudTh>
                    <MudTh>Montant du solde</MudTh>
                    @*<MudTh Style="width:110px"></MudTh>*@
                </HeaderContent>
                <RowTemplate>
                    @*<MudTd DataLabel="ID">@context.SoldeId</MudTd>*@
                    <MudTd DataLabel="Date">@context.Date.ToString("dd MMMM yyyy")</MudTd>
                    <MudTd DataLabel="Nom">@context.NomCompte</MudTd>
                    <MudTd DataLabel="Solde">@context.Montant.Value.ToString("N2", CultureInfo.CreateSpecificCulture("fr-FR")) Ar</MudTd>
                    @*<MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Success" Variant="Variant.Outlined"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Outlined"></MudIconButton>
                </MudTd>*@
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>

        </MudContainer>

    </MudPaper>
}

@code {
    string nom, num;
    Compte compte = new();
    Compte compts = new();
    Solde solde = new();
    Soldium soldium = new();
    private IEnumerable<Compte>? comptes = new List<Compte>();
    private IEnumerable<Solde>? soldes = new List<Solde>();
    private List<Soldium>? soldiums = new List<Soldium>();
    private int selectedRowNumber = -1;
    private List<string> clickedEvents = new();
    private string searchString1 = null!;
    private Soldium selectedItem1 = null!;
    MudTable<Soldium>? tableSolde;
    private HashSet<Solde> selectedItems = new HashSet<Solde>();
    MudForm? form;
    bool success = false;
    public IMask mask1 = new RegexMask(@"^\d+$");
    public CultureInfo _de = CultureInfo.GetCultureInfo("de-DE");
    MudDatePicker? _picker;
    private bool autoClose = true;
    private bool isVisible;

    private void OnValueChanged(Compte selected)
    {
        compts = selected;
    }

    protected override async Task OnInitializedAsync()
    {
        isVisible = true;
        await LoadTableSolde();
        isVisible = false;
    }

    private bool FilterFunc1(Soldium element) => FilterFunc(element, searchString1);
    private bool FilterFunc(Soldium element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Date.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.NomCompte.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Montant.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task LoadTableSolde()
    {
        comptes = await optionService.GetAllComptesAsync();
        soldes = await optionService.GetSoldesInitialAsync();
        if (soldes != null && soldes.Count() > 0)
        {
            foreach (var item in soldes)
            {
                soldium.SoldeId = item.SoldeId;
                soldium.Date = item.Date.Value;
                soldium.CompteId = item.CompteId;
                soldium.Montant = item.Montant;
                foreach (var x in comptes)
                {
                    if (x.CompteId == item.CompteId)
                    {
                        soldium.NomCompte = x.NomCompte;
                        break;
                    }
                }
                soldiums.Add(soldium);
                soldium = new();
            }
        }
        StateHasChanged();
    }

    private void Annuler()
    {
        solde.Date = null;
        solde.Montant = null;
        form.ResetValidation();
        form.Reset();

    }

    private async void AddSolde()
    {
        form.Validate();
        if (success)
        {
            solde.CompteId = compts.CompteId;
            bool HaveSolde = await optionService.GetHaveSoldeInitial(solde.CompteId);
            if (!HaveSolde)
            {
                bool result = await optionService.CreateSoldeAsync(solde);
                if (result)
                {
                    Snackbar.Add("Enregistrement réussi.", Severity.Success);
                    await LoadTableSolde();
                    solde = new();
                }
                else
                {
                    Snackbar.Add("Erreur d'enregistrement, contacter l'administrateur.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Solde initial déjà créer, contacter l’administrateur pour le modifier.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Veuillez compléter tous les champs", Severity.Warning);
        }
    }
}
