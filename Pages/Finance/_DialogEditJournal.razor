@using OSIET_Finance.Controller.OptionAvancees
@using OSIET_Finance.Controller.Finance
@using OSIET_Finance.Models.Finance
@using System.Globalization
@using System.IO
@using System.Net
@inject ISnackbar Snackbar
@inject IOptionAvancees optionService
@inject IJournalService journalService
@inject IDialogService Dialog
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager NavigationManager

<MudForm @ref="form" @bind-IsValid="success">
    <MudDivider Class="mb-3" />
    <MudContainer>
        <MudGrid>
            <MudItem xs="12" sm="3">
                <MudSelect @ref=typeSelect T="string" Variant="Variant.Outlined" @bind-Value=journal.Type Margin="Margin.Dense" Label="Type d'entrée" AnchorOrigin="Origin.BottomCenter" Required RequiredError="Obligatoire">
                    <MudSelectItem Value="@("Entrée")" />
                    <MudSelectItem Value="@("Sortie")" />
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="3">
                <MudSelect T="Compte" Label="compte" @ref=compteSelect ValueChanged="OnValueChangedCompte" AnchorOrigin="Origin.BottomCenter" Required RequiredError="Obligatoire" Variant="Variant.Outlined" Margin="Margin.Dense">
                    @foreach (var item in comptes)
                    {
                        <MudSelectItem Value="@item">@item.NomCompte</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="3">
                <MudTextField Clearable Immediate="true" @bind-Value=journal.Montant Format="N2" Culture="@_de" T="double" Label="Montant" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" RequiredError="Obligatoire"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="3">
                <MudDatePicker ShowWeekNumbers AllowKeyboardInput @bind-Date=journal.Date Editable @ref="_picker" Label="Date" AutoClose="@autoClose" Required Variant="Variant.Outlined" Margin="Margin.Dense">
                    <PickerActions>
                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
                        <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
                        <MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
                    </PickerActions>
                </MudDatePicker>
            </MudItem>
        </MudGrid>
        <MudDivider Class="mt-2 mb-n2" />
    </MudContainer>
    <MudContainer Class="py-4 ">
        <MudGrid Class="d-flex justify-center ">

            <MudItem xs="12" sm="3">
                <MudTextField Label="Payer par" @bind-Value=journal.PayerPar T="string" Required RequiredError="Obligatoire" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="3">
                <MudSelect @ref="imput" T="Imputation" Clearable Label="Imputation" ValueChanged="OnValueChanged" AnchorOrigin="Origin.BottomCenter" Required RequiredError="Obligatoire" Variant="Variant.Outlined" Margin="Margin.Dense">
                    @foreach (var item in imputations)
                    {
                        @if (journal.Type == item.Type)
                        {
                            <MudSelectItem Value="@item">@item.Nom <span style="float:right">@item.NumeroCompte</span></MudSelectItem>
                        }
                        else if (journal.Type == item.Type)
                        {
                            <MudSelectItem Value="@item">@item.Nom <span style="float:right">@item.NumeroCompte</span></MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="3">
                <MudSelect Disabled=(!vInterne) T="Compte" Label="compte interne" ValueChanged="OnValueChangedCompteInterne" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Margin="Margin.Dense">
                    @foreach (var item in comptes)
                    {
                        <MudSelectItem Value="@item">@item.NomCompte</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="3">
                <MudTextField Label="Concernée" @bind-Value=journal.Concernee T="string" Required RequiredError="Obligatoire" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField Label="Libelle" @bind-Value=journal.Libelle T="string" Required RequiredError="Obligatoire" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField @ref=refP Label="Réf pièces" ValueChanged="ActiveUpload" T="string" Required RequiredError="Obligatoire" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudFileUpload T="IBrowserFile" FilesChanged="GetFilePiece" Disabled=!refer>
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Outlined"
                                   Color="Color.Primary"
                                   Style="width:100%"
                                   StartIcon="@Icons.Material.Filled.Download"
                                   for="@context">
                            <p>@uploadText</p>
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudItem>
        </MudGrid>

        <MudDivider Class="mt-2" />

        <MudButton Class="mt-2 ml-2 mb-2" Style="float: right; width: 150px" OnClick="EditJournal" Variant="Variant.Filled" Color="Color.Primary">Enregistrement</MudButton>
        <MudButton Class="mt-2" Style="float: right; width: 150px" OnClick="Annuler" Variant="Variant.Filled" Color="Color.Secondary">Annuler</MudButton>
    </MudContainer>
</MudForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Journal journal { get; set; }
    MudDatePicker? _picker;
    MudSelect<Imputation>? imput;
    MudSelect<Compte>? compteSelect;
    MudSelect<string>? typeSelect = new();
    MudTextField<string>? refP;
    private bool autoClose = true;
    private bool isVisible;
    Journal journalInterne = new();
    Compte compte = new();
    Compte compteInterne = new();
    Solde? solde = new();
    Imputation imputation = new();
    string uploadText = "Pièce ajouter";
    private IEnumerable<Imputation>? imputations = new List<Imputation>();
    private IEnumerable<Compte>? comptes = new List<Compte>();
    private List<Journal>? journals = new List<Journal>();
    private List<Journals>? journalss = new List<Journals>();
    IBrowserFile? file;
    public IMask mask1 = new RegexMask(@"^\d+$");
    public CultureInfo _de = CultureInfo.GetCultureInfo("de-DE");
    MudForm? form;
    bool success = false;
    bool vInterne = false;
    private string searchString1 = null!;
    private Journals selectedItem1 = null!;
    MudTable<Journals>? tableJournal;
    bool refer = false;

    protected override async Task OnInitializedAsync(){
        await LoadTableCompte();
    }

    protected override async Task OnParametersSetAsync()
    {
        typeSelect.Value = journal.Type;
        refP.Value = journal.RefPiece;
        refP.Text = journal.RefPiece;
        ActiveUpload(journal.RefPiece);
        StateHasChanged();
    }

    private void ActiveUpload(string _value)
    {
        journal.RefPiece = _value;
        if (_value == "")
        {
            refer = false;
            journal.RefPiece = null;
        }
        else
        {
            refer = true;
        }
    }

    private void OnValueChanged(Imputation _imputation)
    {
        imputation = _imputation;
        journal.ImputationId = imputation.ImputationId;
        if (_imputation != null && (_imputation.Nom == "Virement interne" || _imputation.Nom == "virement interne"))
            vInterne = true;
        else vInterne = false;

        StateHasChanged();
    }

    private void OnValueChangedType(string _type)
    {
        journal.Type = _type;
        imput.Reset();
        StateHasChanged();
    }

    private void OnValueChangedCompte(Compte _compte)
    {
        compte = _compte;
        journal.CompteId = compte.CompteId;
        StateHasChanged();
    }

    private void OnValueChangedCompteInterne(Compte _compte)
    {
        compteInterne = _compte;
        journalInterne.CompteId = compteInterne.CompteId;

        StateHasChanged();
    }

    private void GetFilePiece(IBrowserFile _file)
    {

        file = _file;
        uploadText = file.Name;
        journal.LocationFichier = journal.RefPiece + Path.GetExtension(uploadText);
        StateHasChanged();
    }

    private void Annuler()
    {
        form.Reset();
        refer = false;
        form.ResetValidation();
        uploadText = "Pièce ajouter";
        compte = new();
        solde = new();
        journal = new();
        imputation = new();
        StateHasChanged();
    }

    protected async void EditJournal()
    {
        form.Validate();
        if (success)
        {
            solde = await optionService.GetLastSoldeByCompte(compte.CompteId);
            if (solde != null)
            {
                double? avant = solde.Montant;
                double? apres = 0;
                if (journal.Type == "Entrée") { apres = solde.Montant + journal.Montant; }
                else if (journal.Type == "Sortie") { apres = solde.Montant - journal.Montant; }
                if (apres <= 0)
                {
                    var parameters = new DialogParameters();
                    string message = "Le solde de ce compte est insuffisant.";

                    parameters.Add("ContentText", message);
                    parameters.Add("ButtonText", "Ok");
                    parameters.Add("Color", Color.Warning);

                    var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

                    var dialogUser = Dialog.Show<_DialogMontantInsuffisant>("Attention !", parameters, options);
                    var resultDialogUser = await dialogUser.Result;
                }
                else
                {
                    if (vInterne)
                    {
                        journal.IdSoldeAvant = solde.SoldeId;
                        Solde solde_ = new();
                        solde_.Date = DateTime.Now;
                        solde_.CompteId = solde.CompteId;
                        solde_.Montant = solde.Montant - journal.Montant;

                        Solde _solde = await optionService.CreateSoldeReturnAsync(solde_);
                        journal.IdSoldeApres = _solde.SoldeId;
                        bool save = true;
                        if (journal.LocationFichier != null || journal.LocationFichier != "")
                            save = await SendFile(journal.LocationFichier);
                        if (save)
                        {
                            bool result = await journalService.CreateJournal(journal);
                            if (result)
                            {
                                Solde __solde = await optionService.GetLastSoldeByCompte(compteInterne.CompteId);
                                journalInterne.IdSoldeAvant = __solde.SoldeId;
                                Solde solde__ = new();
                                solde__.Date = DateTime.Now;
                                solde__.CompteId = __solde.CompteId;
                                solde__.Montant = __solde.Montant + journal.Montant;
                                Solde _solde_ = await optionService.CreateSoldeReturnAsync(solde__);

                                journalInterne.IdSoldeAvant = __solde.SoldeId;
                                journalInterne.IdSoldeApres = _solde_.SoldeId;
                                journalInterne.Type = "Entrée";
                                journalInterne.CompteId = compteInterne.CompteId;
                                journalInterne.Montant = journal.Montant;
                                journalInterne.Date = journal.Date;
                                journalInterne.PayerPar = journal.PayerPar;
                                journalInterne.ImputationId = journal.ImputationId;
                                journalInterne.Concernee = journal.Concernee;
                                journalInterne.Libelle = journal.Libelle;
                                journalInterne.RefPiece = journal.RefPiece;
                                journalInterne.LocationFichier = journal.LocationFichier;

                                bool result_ = await journalService.CreateJournal(journalInterne);
                                if (result_)
                                {
                                    Snackbar.Add("Enregistrement réussi.", Severity.Success);
                                    //await LoadTableImputation();
                                    journal = new();
                                    compte = new();
                                    solde = new();
                                    imputation = new();
                                    journal.Date = DateTime.Now;
                                }
                                else
                                {
                                    Snackbar.Add("Erreur d'enregistrement, contacter l'administrateur.", Severity.Error);
                                }
                            }
                            else
                            {
                                Snackbar.Add("Erreur d'enregistrement, contacter l'administrateur.", Severity.Error);
                            }
                        }
                        else
                        {
                            Snackbar.Add("Erreur upload file, enregistrement annuler..", Severity.Error);
                        }
                    }
                    else
                    {
                        journal.IdSoldeAvant = solde.SoldeId;
                        Solde solde_ = new();
                        solde_.Date = DateTime.Now;
                        solde_.CompteId = solde.CompteId;
                        solde_.Montant = apres;

                        Solde _solde = await optionService.CreateSoldeReturnAsync(solde_);
                        journal.IdSoldeApres = _solde.SoldeId;
                        bool save = true;
                        if (journal.LocationFichier != null || journal.LocationFichier != "")
                            save = await SendFile(journal.LocationFichier);
                        if (save)
                        {
                            bool result = await journalService.CreateJournal(journal);
                            if (result)
                            {
                                Snackbar.Add("Enregistrement réussi.", Severity.Success);
                                //await LoadTableImputation();
                                journal = new();
                                compte = new();
                                solde = new();
                                imputation = new();
                                journal.Date = DateTime.Now;
                            }
                            else
                            {
                                Snackbar.Add("Erreur d'enregistrement, contacter l'administrateur.", Severity.Error);
                            }
                        }
                        else
                        {
                            Snackbar.Add("Erreur upload file, enregistrement annuler..", Severity.Error);
                        }
                    }

                }
            }
            else
            {
                Snackbar.Add("Le solde du compte " + compte.NomCompte + " est vide.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Veuillez compléter tous les champs", Severity.Warning);
        }
    }

    private async Task LoadTableCompte()
    {
        comptes = await optionService.GetAllComptesAsync();
        imputations = await optionService.GetAllImputationsAsync();
        imputation = await optionService.GetImputationById(journal.ImputationId);
        OnValueChanged(imputation);
        imput.Value = imputation;
        imput.Text = imputation.Nom;
        StateHasChanged();
    }

    private async Task<bool> SendFile(string fileName)
    {
        var path = Path.Combine(Environment.CurrentDirectory, "wwwroot"
                    , "Pieces",
                    fileName);

        await using FileStream fs = new(path, FileMode.CreateNew);
        await file.OpenReadStream(50438910).CopyToAsync(fs);
        return true;
    }
}
